# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net
name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  major: 1
  minor: 0

steps:
- task: PowerShell@2
  displayName: CalculateVersion
  inputs:
    targetType: 'inline'
    script: |
      $Build = ('{0:yy}{1:000}' -f [datetime]::Today, [datetime]::Today.DayOfYear)
      Write-Host "##vso[task.setvariable variable=versionBuild]$Build"
      $Revision = [int](([datetime]::Now - [datetime]::Today).TotalSeconds / 1.4)
      Write-Host "##vso[task.setvariable variable=versionRevision]$Revision"
- task: NuGetToolInstaller@1

- task: DownloadSecureFile@1
  name: privateKey
  displayName: GetPrivateKey
  inputs:
    secureFile: 'BigSolution.snk'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: '1b04fa51-ab33-4e2a-9966-fc900bcff434'
    includeNuGetOrg: false
    verbosityPack: Normal

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    arguments: '-p:DelaySign=false;AssemblyOriginatorKeyFile=$(privateKey.secureFilePath);Prerelease=$(prerelease);Build=$(versionBuild);Revision=$(versionRevision);Configuration=Release;GeneratePackageOnBuild=true --no-restore'

- task: DotNetCoreCLI@2
  displayName: Run Tests
  inputs:
    command: 'test'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(agent.builddirectory)'
    Contents: '**\*.*nupkg'
    flattenFolders: true
    TargetFolder: '$(build.artifactstagingdirectory)'
    CleanTargetFolder: true
    OverWrite: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'packages'
    publishLocation: 'Container'

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com_emmanuelbenitez'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(major).$(minor).$(versionBuild).$(versionRevision)'
    isDraft: true
    isPreRelease: $(prerelease)
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
